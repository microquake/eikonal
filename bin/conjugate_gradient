#!/usr/bin/env python
# @Author : Jean-Pascal Mercier <jean-pascal.mercier@agsis.com>
#
# @Copyright (C) 2010 Jean-Pascal Mercier
#
# All rights reserved.
#
__doc__ = """
"""

import agstd.main as main
import eikonal.linear as linear
import sys

import numpy as np
import scipy as sc
import scipy.sparse
import scipy.optimize
import pickle

try:
    import simplejson as json
except ImportError as e:
    import json


class UniformWeight(object):
    def __call__(self, residual):
        return sc.sparse.eye(residual.size, residual.size)


class GaussianWeight(object):
    def __init__(self, sigma = 0):
        self.sigma = sigma

    def __call__(self, residual):
        var = np.var(residual)
        weights = np.exp(-0.5 * residual ** 2 / var)
        threshold = np.exp(-0.5 *  self.sigma ** 2)
        tweights = np.where(weights > threshold, threshold, weights)
        return sc.sparse.dia_matrix((tweights / threshold, (0, )),
                                    shape=(residual.size, residual.size))

class BoxWeight(object):
    def __init__(self, sigma = 0):
        self.sigma = sigma

    def __call__(self, residual):
        var = np.var(residual)
        weights = np.exp(-0.5 * residual ** 2 / var)
        threshold = np.exp(-0.5 *  self.sigma ** 2)
        tweights = np.where(weights > threshold, threshold, 0)
        return sc.sparse.dia_matrix((tweights / threshold, (0, )),
                                    shape=(residual.size, residual.size))

wtypes = {"gaussian" : GaussianWeight,
          "uniform"  : UniformWeight,
          "box"      : BoxWeight}


def CGInverse(A, D, P, initial, weighting, batch, max_iter, gtol, stats,
              itype='linear'):
    import sys

    wfun = wtypes[weighting['name']](*weighting['args'])

    AR, D_mat, P_mat, I_vect = [sc.load(s) for s in [A, D, P, initial]]
    weights = wfun(AR['R'])
    A_mat, R_vect = weights * AR['A'], weights * AR['R']

    X0 = np.zeros(I_vect.size, dtype = 'float')

    max_iter = int(max_iter)

    DT_mat = D_mat.T * D_mat
    #DT_mat = linear.laplaceOP(64, 64, 64) ** 2
    #DT_mat = DT_mat.T * DT_mat
    #print DT_mat

    if itype == 'linearcg':
        inversion = linear.CGInversion()
        for X in inversion(X0, A_mat, R_vect, I_vect, DT_mat, P_mat,
                                  maxiter=max_iter, gtol=gtol, batch=batch):
            g = X + I_vect
            sys.stderr.write("%f, %f, %e\r" % (g.min(), g.max(),
                                               inversion.jnorms[-1]))
        s = inversion.jnorms

    elif itype == 'newtoncg':
        norm = np.average(A_mat.data)
        A_mat = A_mat / norm
        R_vect = R_vect / norm

        def callback(m):
            print(m.min(), m.max())

        f = linear.CGObj(A_mat, R_vect, I_vect, DT_mat, P_mat)
        X = scipy.optimize.fmin_ncg(f, X0, f.fprime, fhess_p=f.fhess_p,
                                    maxiter=max_iter, callback=callback)
        s = np.array([])
    else:
        raise ValueError("Uknown inversion type")

    if stats is not None:
        pickle.dump(s, open(stats, 'wb'),
                    protocol=pickle.HIGHEST_PROTOCOL)
    return X + I_vect


if __name__ == '__main__':
    main.main(CGInverse, batch=int, mat_iter=int, gtol=float,
              weighting=json.loads)
