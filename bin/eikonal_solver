#!/usr/bin/env python
#
# @Author : Jean-Pascal Mercier <jean-pascal.mercier@agsis.com>
#
# @Copyright (C) 2010 Jean-Pascal Mercier
#
# All rights reserved.
#
__doc___ = """
This script is a n-dimensional eikonal solver from a velocity grid and seeds.

A subgrid is integrated around the seed to ensure the curvature around the
singulatiry is captured correctly.
"""

import agstd.main as main
import eikonal.solver as esolver
import numpy as np
import scipy as sc
import scipy.ndimage

import eikonal.data
import sys

import logging
log = logging.getLogger("Eikonal Solver")

def parse_seeds(seeds):
    """
    This method parse a list of string and return in the format "10,20;23,30" 
    and return a list of tuple.
    :param seeds: string in the format "10,20:23,42"

    :return: A list of tuple
    """
    seeds = [[float(s) for s in w.split(',')] for w in
             seeds.strip('"').split(':')]
    return np.array(seeds)

def seeded_esolve(velocity, seeds, spacing, second_order = True):
    """
    """
    shape = velocity.shape

    viscosity = np.zeros(np.array(shape) + 4, dtype = 'float64')
    viscosity.__setitem__([slice(2,-2)] * len(shape), 1.0 / velocity)

    tag = np.zeros(viscosity.shape, dtype = 'int32')
    tag.fill(2)
    tag.__setitem__([slice(2, -2)] * len(shape), 0)

    arrival = np.empty_like(viscosity)
    arrival.fill(np.inf)

    esolver.SFMM(seeds + 2, np.zeros(len(seeds)), tag, viscosity, arrival,
                 spacing, second_order=second_order)

    return arrival.__getitem__([slice(2,-2)] * len(shape))


def tagged_esolve(tag, velocity, arrival, spacing, second_order = True):
    """
    """
    shape = velocity.shape
    viscosity = np.zeros(np.array(shape) + 4, dtype = 'float64')
    viscosity.__setitem__([slice(2,-2)] * velocity.ndim, 1.0 / velocity)

    os_tag = np.zeros(viscosity.shape, dtype = 'int32')
    os_tag.fill(2)
    os_tag.__setitem__([slice(2, -2)] * tag.ndim, tag)

    os_arrival = np.empty_like(viscosity)
    os_arrival.fill(np.inf)
    os_arrival.__setitem__([slice(2, -2)] * arrival.ndim, arrival)

    esolver.I_FMM(os_tag, viscosity, os_arrival, spacing,
                  second_order=second_order)

    return os_arrival.__getitem__([slice(2,-2)] * arrival.ndim)


def check_boundary(value, shape):
    result = True
    for v, s in zip(value, shape):
        result = result and (v > 0) and (v < (s - 1))
    return result



def esolve(velocity, seeds, subgrid_spacing = 10, second_order = True, spacing = None):
    """
    :param velocity: A velocity grid in EKImageData or simply a pickled grid.
    :param seeds: A list of tuple separated by a colon (i.e. 10,20,30:40,50,60)
    :param second_order: Boolean determining the order of the eikonal solver \
            used. 1st or 2nd order.
    :param spacing: The spacing of the grid if EKImageData not used.
    :param subgrid_spacing: the spacing of the subgrid around the seeds in \
            spacing. If we have more than 1 seed, this parameter is ignored.

    :return: EKImageData reprenting the arrival grid.
    """
    if np.any(velocity <= 0):
        raise ValueError("Eikonal Solver Relies On the Causality of the "
                         "solution. The Velocity grid MUST be all positive "
                         "values")
    if isinstance(velocity, eikonal.data.EKImageData):
        idata = velocity
        velocity = idata.data
        spacing = idata.spacing
        seeds = idata.transform_to(seeds)
    else:
        if spacing is None:
            raise ValueError("argument --spacing is needed withouth a grid "
                             "description")
        idata = eikonal.data.EKImageData(velocity, spacing=spacing,
                                         origin=[0] * velocity.ndim)

    for s in seeds:
        if not check_boundary(s, velocity.shape):
            # log.critical("Seed outside grid boundary")
            print("Seed outside grid boundary")
            sys.exit(1)

    if False:
        ndim = velocity.ndim
        seed = seeds[0]
        s_clamped = seed.astype('int')
        subgrid_slice = [slice(max(0, s_c - 2), min(s_c + 4, s))
                         for s, s_c in zip(velocity.shape, s_clamped)]

        subgrid_shape   = np.array([6 * subgrid_spacing] * ndim)
        subgrid         = np.empty(subgrid_shape)
        subgrid_origin  = s_clamped - 2
        subseed         = (seed - subgrid_origin) * subgrid_spacing

        subgrid_pos         = np.indices(subgrid_shape) / subgrid_spacing + \
                              subgrid_origin.reshape((ndim,) +
                                                     tuple([1] * ndim))
        subgrid_indices     = np.indices([6] * ndim) * subgrid_spacing

        subgrid_velocity    = sc.ndimage.map_coordinates(velocity, subgrid_pos)
        subgrid_arrival     = seeded_esolve(subgrid_velocity,
                                            np.array([subseed]),
                                            idata.spacing / subgrid_spacing,
                                            second_order=second_order)

        grid_indices        = subgrid_indices / subgrid_spacing + \
                              subgrid_origin.reshape((ndim,) +
                                                     tuple([1] * ndim))

        mask                = True
        for si, s in zip(grid_indices, velocity.shape):
            mask = mask & (si > 0) & (si <= s - 1)


        tag = np.empty(velocity.shape, dtype = 'int32')
        tag.fill(0)
        tag[[gi[mask] for gi in grid_indices]] = 1

        arrival = np.empty(velocity.shape, dtype='float64')
        arrival.fill(np.inf)
        arrival[[gi[mask] for gi in grid_indices]] = \
            subgrid_arrival[[si[mask] for si in subgrid_indices]]

        #import scipy
        #print subgrid_arrival[[si[mask] for si in subgrid_indices]]
        #print np.argmin(arrival)
        #print subgrid_indices
        #scipy.misc.imshow(np.where(arrival == np.inf, 0, arrival))

        idata.data = tagged_esolve(tag, velocity, arrival, idata.spacing,
                                   second_order=second_order)
    else:
        idata.data = seeded_esolve(velocity, seeds, idata.spacing,
                                   second_order=second_order)

    idata.seeds = seeds

    return idata


if __name__ == "__main__":
    main.main(esolve, spacing=float, seeds=parse_seeds, velocity=np.load,
              subgrid_spacing=int)
