#!/usr/bin/env python
#
# @Author : Jean-Pascal Mercier <jean-pascal.mercier@agsis.com>
#
# @Copyright (C) 2010 Jean-Pascal Mercier
#
# All rights reserved.
#
__doc__ = """
This script compute the rays from a list of event to a particular station.

"""

import agstd.main as main

import pickle
import numpy as np
import scipy as sc
import scipy.sparse
import os
#from agstd.cli import ProgressBar
import sys

import eikonal.raytrace as raytrace

import sys

from itertools import izip

sys.stdout = sys.stderr



def buildray(arrival, velocity, events, h = 1):
    """
    :param arrival: This is the arrival grid as calculated by an eikonal \
            solver.
    :param velocity: This is the velocity grid.
    :param event: contain the event location triplet "x,y,z"
    :param h: The step of the RK integration Scheme.
    """

    current_events = np.load(events)
    h = 1 if h is None else float(h)

    if not (velocity.check_compatibility(arrival)):
        raise ValueError("arrival Velocity and Velocity must have same" \
                         "origin, spacing and shape")

    start = tuple(arrival.seeds[0])

    max_len = np.sqrt(np.sum(np.array(velocity.data.shape) ** 2))

    raybuffer = np.empty((max_len * (8.0 / h), len(velocity.data.shape)), dtype='float64')

    rays = []

    #velocity.origin = np.array(velocity.origin)
    #PB = ProgressBar(size=len(current_events))

    for i, evdesc in enumerate(current_events):
        sys.stdout.write("\rProcessing event %d of %d" % (i, len(current_events)))

        #PB()
        finish = tuple(velocity.transform_to(evdesc))
        rtt, ray = raytrace.raytrace(arrival.data, velocity.data, start, finish,
                                           raybuffer, arrival.spacing, h=h)

        rays.append(ray.copy())

    return dict(rays=rays)

if __name__ == "__main__":
    main.main(buildray, spacing=float, arrival=np.load,
              velocity=np.load, traveltime=np.load)
